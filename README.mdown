# ResourceManager

> Are you tired of waiting for your app to compile and get synchronized to your device when you want to update an image or localization ? Could it be wonderfull if you could distribute your application over the air and somebody else edit the localization files for you ? Imagine if you could give your app to a designer who tweak the layouts and stylesheets for you without any Xcode installation nor objective-C pre-requierements ?
>
> This is why we made the ResourceManager framework because in combination with the AppCoreKit and a few lines of code for very specific application cases, we can do it !
</i>



<b>ResourceManager</b> is a framework designed to improve your productivity while developing iOS applications. The main objective is to synchronize multiple resource repositories and work with the most recent version of each. By resources, we mean everything that you'd like to embed into your application : <b>Images, nibs, strings files, config files, json, AppcoreKit stylesheets and layouts, ...</b>

<b>ResourceManager</b> provides simple Apis similar to <b>NSBundle</b> to get the paths of the most recent resources from the various resource repositories.

Repositories can be the application's Main Bundle as well as a dropbox folder. The Resource Manager provides APIs similar to <b>NSNotificationCenter</b> to get notified when a file gets updated. As soon as a file gets saved in one or several repositories, the files will get downloaded to the cache directory if needed and a notification is fired your application to update. You can also get notified of file addition/change by observing file extensions.

It has been designed to get <b>update mechanism directly to your device and not only the simulator</b> like we previously implemented into the <b>AppCoreKit</b>. Several changes have been made to the <b>AppCoreKit</b> to fully integrate this new framework as a weak dependency and in a very efficient way. <b>AppCoreKit</b> provides mechanism to automatically reload stylesheets and layouts, images, color palettes, mappings, mock, localization files (.strings) and update the UI as a consequence. Lets go to the <b>AppCoreKit</b> github repository and get the <i>resource-manager</i> branch to try the integration:

https://github.com/wherecloud/AppCoreKit


This framework should mainly get used during the development process as you do not want to impact your user experience with files updating at runtime !
You can easily disconnect sync mechanism but still using the APIs to get the resources from the application main bundle by not setting a shared RMResourceManager.


## Sample Usage

<b>1. Create your app on dropbox:</b>

https://www.dropbox.com/developers/apps

<b>2. In your target plist:</b>

The dropbox authentication mechanism requires application redirect via Url Scheme.
"From the DropboxSDK documentation" at https://www.dropbox.com/developers/core/start/ios

Once authenticated, your app will be re-launched with the URL scheme db-APP_KEY. The easiest way to register for this scheme is to right-click on your app's plist file and select Open As â†’ Source Code, and add the following code below the first <dict> tag, substituting APP_KEY with your app's key:

<pre> CFBundleURLTypes CFBundleURLSchemes db-APP_KEY</pre>

<b>3. In your application delegate:</b>



``` objective-c
#import < ResourceManager/ResourceManager.h >

- (id)init{
   self = [super init];
   
    RMResourceManager* rm = [[RMResourceManager alloc]initWithAppKey:@"APP_KEY" 
                                                              secret:@"APP_SECRET"
                                                       dropboxFolder:@"ROOT_DIRECTORY"];
                                                       
    //Comment or remove the following code when you want to deactivate the sync mechanism
    [RMResourceManager setSharedManager:rm];
    
    //Do your stuff
}
   
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions{
    //Do your stuff ...

    //After :
    [self.window makeKeyAndVisible];

    [[RMResourceManager sharedManager]handleApplication:application 
                          didFinishLaunchingWithOptions:launchOptions];
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url 
                                       sourceApplication:(NSString *)sourceApplication 
                                              annotation:(id)annotation {
                                              
	[[RMResourceManager sharedManager]handleApplication:application 
                                                openURL:url];
                                                
    //Do your stuff
}
```


<b>4. Retrieving The most recent path for resource:</b>

``` objective-c
NSString* resourcePath = [RMResourceManager pathForResource:@"MyResource" 
                                                     ofType:@"myExtension"];
//Load the resource here using the "resourcePath" ...
```

<b>5. Getting notified when this resource gets updated:</b>

``` objective-c
[RMResourceManager addObserverForPath:resourcePath 
                               object:self 
                           usingBlock:^(id observer, NSString *path) {
    //Load the resource here by using the last updated "path" ...
}];
```
    
As the manager keeps some weak references on the oberver object, you must unregister from the resource manager when needed or at least when you object ("self" here) gets deallocated.
    
``` objective-c
[RMResourceManager removeObserver:self];
```

<b>6. Retrieving The most recent paths for resources with a specific extension:</b>

``` objective-c
NSArray* paths = [CKResourceManager pathsForResourcesWithExtension:@"mp3"];
//Do something with those files
```

<b>7. Getting notified when these resource gets updated or a new file is added with the specified extension:</b>

``` objective-c
[CKResourceManager addObserverForResourcesWithExtension:@"mp3" 
                                                 object:self 
                                             usingBlock:^(id observer, NSArray *paths) {
    //Do something with the up to date paths for all mp3 files.
}];
```

Like for a single path observation, do not forget to unregister your observer.


## Compiling the framework

ResourceManager is built as a Static Framework. Static Framework are not natively supported by Xcode and requires some additional specifications to get compiled properly.

Copy the following file:

<pre>./static Frameworks.xcspec</pre>

To:

<pre>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Specifications</pre>
And
<pre>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications</pre>

<b>IMPORTANT</b> : You will have to copy this file each time you update Xcode to a newer version.


## Compiling the API Documentation

ResourceManager provides a "Documentation" target that generate a docset using the public header files and the additional programming guides in the Documentation folder. This target is a script base on "appledoc". To install appledoc, follow the installation procedure here : https://github.com/tomaz/appledoc

## Using ResourceManager in your own App

* <b>Drag'n'drop</b> the ResourceManager project as subproject in Xcode.

* Adds the ResourceManager.framework <b>link dependency to your target</b> in the build phases settings.

* Add the following <b>frameworks and libraries dependencies</b> to your project in the build phases settings: 
<pre>
DropboxSDK, (that can be found in this repository) 
Security, 
QuartzCore.
</pre>


* Adds the following <b>link flags</b> in your build settings (<b>OTHER_LDFLAGS</b>): 
<pre>
 -ObjC -all_load -weak_library /usr/lib/libstdc++.dylib
</pre>



## Credits

If you have any comments, suggestions, question or information request, please contact us at appcorekitsupport@wherecloud.com.

Want to keep updated? Follow us on Twitter - @appcorekit.


## License

Copyright 2009-2013 WhereCloud, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
   
